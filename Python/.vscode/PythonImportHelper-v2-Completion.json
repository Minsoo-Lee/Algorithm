[
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "LinkedList",
        "description": "LinkedList",
        "isExtraImport": true,
        "detail": "LinkedList",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "LinkedList",
        "description": "LinkedList",
        "isExtraImport": true,
        "detail": "LinkedList",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "importPath": "LinkedList",
        "description": "LinkedList",
        "isExtraImport": true,
        "detail": "LinkedList",
        "documentation": {}
    },
    {
        "label": "heapq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "heapq",
        "description": "heapq",
        "detail": "heapq",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter06_String.01_valid_palindrome",
        "description": "Chapter06_String.01_valid_palindrome",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, s: str) -> bool:\n        tmp = []\n        for ch in s:\n            if ch.isalpha():\n                tmp.append(ch.lower())\n            if ch.isdigit():\n                tmp.append(ch)\n        for i in range(len(tmp) // 2):\n            if tmp[i] != tmp[len(tmp) - i - 1]:",
        "detail": "Chapter06_String.01_valid_palindrome",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter06_String.02_reverse_string",
        "description": "Chapter06_String.02_reverse_string",
        "peekOfCode": "class Solution:\n    def reverseString(self, s: list[str]) -> None:\n        for i in range(len(s) // 2):\n            s[i], s[len(s) - i - 1] = s[len(s) - i - 1], s[i]",
        "detail": "Chapter06_String.02_reverse_string",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter06_String.03_Reorder_Data_in_Log_Files",
        "description": "Chapter06_String.03_Reorder_Data_in_Log_Files",
        "peekOfCode": "class Solution:\n    def reorderLogFiles(self, logs):\n        digits = []\n        alphas = []\n        for s in logs:\n            if s.split(\" \")[1].isdigit():\n                digits.append(s)\n            elif s.split(\" \")[1].isalpha():\n                alphas.append(s)\n        print(alphas)",
        "detail": "Chapter06_String.03_Reorder_Data_in_Log_Files",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter06_String.04_Most_Common_Word",
        "description": "Chapter06_String.04_Most_Common_Word",
        "peekOfCode": "class Solution:\n    def mostCommonWord(self, paragraph: str, banned: list[str]) -> str:\n        dic = {}\n        s = []\n        tmp = []\n        for ch in paragraph:\n            if ch.isalpha():\n                tmp.append(ch.lower())\n            else:\n                word = \"\".join(tmp)",
        "detail": "Chapter06_String.04_Most_Common_Word",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter06_String.05_group_anagrams",
        "description": "Chapter06_String.05_group_anagrams",
        "peekOfCode": "class Solution:\n    def groupAnagrams(self, strs: list[str]) -> list[list[str]]:\n        result = collections.defaultdict(list)\n        for word in strs:\n            result[''.join(sorted(word))].append(word)\n        return list(result.values())",
        "detail": "Chapter06_String.05_group_anagrams",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter06_String.06_Longest_Palindromic_Substring",
        "description": "Chapter06_String.06_Longest_Palindromic_Substring",
        "peekOfCode": "class Solution:\n    def expand(self, s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return s[left + 1 : right]\n    def longestPalindrome(self, s: str) -> int:\n        longest = []\n        if len(s) < 2 or s == s[::-1]:\n            return s",
        "detail": "Chapter06_String.06_Longest_Palindromic_Substring",
        "documentation": {}
    },
    {
        "label": "sum_two",
        "kind": 2,
        "importPath": "Chapter07_Array.07_Two_Sum",
        "description": "Chapter07_Array.07_Two_Sum",
        "peekOfCode": "def sum_two(nums, target):\n    for i, num in enumerate(nums):\n        find = target - num\n        if find in nums[i + 1:]:\n            return [i, nums[i + 1:].index(find) + i + 1]\nprint(sum_two(nums, target))",
        "detail": "Chapter07_Array.07_Two_Sum",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Chapter07_Array.07_Two_Sum",
        "description": "Chapter07_Array.07_Two_Sum",
        "peekOfCode": "nums = list(map(int, input().split()))\ntarget = int(input())\ndef sum_two(nums, target):\n    for i, num in enumerate(nums):\n        find = target - num\n        if find in nums[i + 1:]:\n            return [i, nums[i + 1:].index(find) + i + 1]\nprint(sum_two(nums, target))",
        "detail": "Chapter07_Array.07_Two_Sum",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "Chapter07_Array.07_Two_Sum",
        "description": "Chapter07_Array.07_Two_Sum",
        "peekOfCode": "target = int(input())\ndef sum_two(nums, target):\n    for i, num in enumerate(nums):\n        find = target - num\n        if find in nums[i + 1:]:\n            return [i, nums[i + 1:].index(find) + i + 1]\nprint(sum_two(nums, target))",
        "detail": "Chapter07_Array.07_Two_Sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter07_Array.08_Trapping_Rain_Water",
        "description": "Chapter07_Array.08_Trapping_Rain_Water",
        "peekOfCode": "class Solution:\n    def get_max_right_left(self, height, max):\n        left = -1;\n        right = -1;\n        for i in range(len(height)):\n            if height[i] == max:\n                if left == -1:\n                    left = i\n                right = i\n        return left, right",
        "detail": "Chapter07_Array.08_Trapping_Rain_Water",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter07_Array.09_3Sum",
        "description": "Chapter07_Array.09_3Sum",
        "peekOfCode": "class Solution:\n    def threeSum(self, nums: list[int]) -> list[list[int]]:\n        result = []\n        nums.sort()\n        for i in range(len(nums) - 2):\n            left, right = i + 1, len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if sum > 0:\n                    right -= 1",
        "detail": "Chapter07_Array.09_3Sum",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter07_Array.10_array_partition",
        "description": "Chapter07_Array.10_array_partition",
        "peekOfCode": "class Solution:\n    def arrayPairSum(self, nums: list[int]) -> int:\n        nums.sort()\n        sum = 0\n        for i in range(0, len(nums), 2):\n            sum += nums[i]\n        return sum",
        "detail": "Chapter07_Array.10_array_partition",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter07_Array.11_Product_of_Array_Except_Self",
        "description": "Chapter07_Array.11_Product_of_Array_Except_Self",
        "peekOfCode": "class Solution:\n    def productExceptSelf(self, nums: list[int]) -> list[int]:\n        i = 0\n        result = []\n        tmp_lst = []\n        tmp = 1\n        for i in range(0, len(nums)):\n            tmp_lst.append(tmp)\n            tmp *= nums[i]\n        print(tmp_lst)",
        "detail": "Chapter07_Array.11_Product_of_Array_Except_Self",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter07_Array.12_Best_Time_to_Buy_and_Sell_Stock",
        "description": "Chapter07_Array.12_Best_Time_to_Buy_and_Sell_Stock",
        "peekOfCode": "class Solution:\n    def maxProfit(self, prices: list[int]) -> int:\n        output = 0\n        min_price = sys.maxsize\n        for price in prices:\n            min_price = min(price, min_price)\n            output = max(output, price - min_price)\n        return output",
        "detail": "Chapter07_Array.12_Best_Time_to_Buy_and_Sell_Stock",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.13_Palindrome_Linked_List",
        "description": "Chapter08_Linked_List.13_Palindrome_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        rev = None\n        slow = fast = head\n        while fast and fast.next:\n            fast = fast.next.next",
        "detail": "Chapter08_Linked_List.13_Palindrome_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.13_Palindrome_Linked_List",
        "description": "Chapter08_Linked_List.13_Palindrome_Linked_List",
        "peekOfCode": "class Solution:\n    def isPalindrome(self, head: ListNode) -> bool:\n        rev = None\n        slow = fast = head\n        while fast and fast.next:\n            fast = fast.next.next\n            rev, rev.next, slow = slow, rev, slow.next\n        if fast:\n            slow = slow.next\n        while rev:",
        "detail": "Chapter08_Linked_List.13_Palindrome_Linked_List",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.14_Merge_Two_Sorted_Lists",
        "description": "Chapter08_Linked_List.14_Merge_Two_Sorted_Lists",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def mergeTwoLists(self, list1: ListNode, list2: ListNode) -> ListNode:\n        new_node = ListNode(0)\n        tmp = new_node\n        while list1 and list2:\n            if list1.val >= list2.val:",
        "detail": "Chapter08_Linked_List.14_Merge_Two_Sorted_Lists",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.14_Merge_Two_Sorted_Lists",
        "description": "Chapter08_Linked_List.14_Merge_Two_Sorted_Lists",
        "peekOfCode": "class Solution:\n    def mergeTwoLists(self, list1: ListNode, list2: ListNode) -> ListNode:\n        new_node = ListNode(0)\n        tmp = new_node\n        while list1 and list2:\n            if list1.val >= list2.val:\n                value = list2.val\n                list2 = list2.next\n            else:\n                value = list1.val",
        "detail": "Chapter08_Linked_List.14_Merge_Two_Sorted_Lists",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.15_Reverse_Linked_List",
        "description": "Chapter08_Linked_List.15_Reverse_Linked_List",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        rev = None\n        while head:\n            tmp = rev\n            rev, rev.next, head = head, rev, head.next",
        "detail": "Chapter08_Linked_List.15_Reverse_Linked_List",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.15_Reverse_Linked_List",
        "description": "Chapter08_Linked_List.15_Reverse_Linked_List",
        "peekOfCode": "class Solution:\n    def reverseList(self, head: ListNode) -> ListNode:\n        rev = None\n        while head:\n            tmp = rev\n            rev, rev.next, head = head, rev, head.next\n        return rev",
        "detail": "Chapter08_Linked_List.15_Reverse_Linked_List",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.16_Add_Two_Numbers",
        "description": "Chapter08_Linked_List.16_Add_Two_Numbers",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        result = ListNode(0)\n        tmp = result\n        ten = 0\n        while l1 and l2:",
        "detail": "Chapter08_Linked_List.16_Add_Two_Numbers",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.16_Add_Two_Numbers",
        "description": "Chapter08_Linked_List.16_Add_Two_Numbers",
        "peekOfCode": "class Solution:\n    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:\n        result = ListNode(0)\n        tmp = result\n        ten = 0\n        while l1 and l2:\n            value = l1.val + l2.val\n            one = (value + ten) % 10\n            tmp.next = ListNode(one)\n            ten = (value + ten) // 10",
        "detail": "Chapter08_Linked_List.16_Add_Two_Numbers",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.17_Swap_Nodes_in_Pairs",
        "description": "Chapter08_Linked_List.17_Swap_Nodes_in_Pairs",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        tmp = prev = ListNode(None)\n        prev.next = head\n        while head and head.next:\n            prev.next = head.next",
        "detail": "Chapter08_Linked_List.17_Swap_Nodes_in_Pairs",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.17_Swap_Nodes_in_Pairs",
        "description": "Chapter08_Linked_List.17_Swap_Nodes_in_Pairs",
        "peekOfCode": "class Solution:\n    def swapPairs(self, head: ListNode) -> ListNode:\n        tmp = prev = ListNode(None)\n        prev.next = head\n        while head and head.next:\n            prev.next = head.next\n            head.next = prev.next.next\n            prev.next.next = head\n            head = head.next\n            prev = prev.next.next",
        "detail": "Chapter08_Linked_List.17_Swap_Nodes_in_Pairs",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.18_odd_even_linked_list",
        "description": "Chapter08_Linked_List.18_odd_even_linked_list",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def oddEvenList(self, head: ListNode) -> ListNode:\n        even = ListNode(None)\n        even_tmp = even\n        odd = ListNode(None)\n        odd_tmp = odd",
        "detail": "Chapter08_Linked_List.18_odd_even_linked_list",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.18_odd_even_linked_list",
        "description": "Chapter08_Linked_List.18_odd_even_linked_list",
        "peekOfCode": "class Solution:\n    def oddEvenList(self, head: ListNode) -> ListNode:\n        even = ListNode(None)\n        even_tmp = even\n        odd = ListNode(None)\n        odd_tmp = odd\n        count = 1\n        while head:\n            if count % 2 == 0:\n                odd_tmp.next = ListNode(head.val)",
        "detail": "Chapter08_Linked_List.18_odd_even_linked_list",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.19_Reverse_Linked_List_II",
        "description": "Chapter08_Linked_List.19_Reverse_Linked_List_II",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\nclass Solution:\n    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\n        tmp = head\n        count = 1\n        result = ListNode(None)\n        result_tmp = result",
        "detail": "Chapter08_Linked_List.19_Reverse_Linked_List_II",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter08_Linked_List.19_Reverse_Linked_List_II",
        "description": "Chapter08_Linked_List.19_Reverse_Linked_List_II",
        "peekOfCode": "class Solution:\n    def reverseBetween(self, head: ListNode, left: int, right: int) -> ListNode:\n        tmp = head\n        count = 1\n        result = ListNode(None)\n        result_tmp = result\n        while tmp and count < left:\n            result_tmp.next = ListNode(tmp.val)\n            result_tmp = result_tmp.next\n            tmp = tmp.next",
        "detail": "Chapter08_Linked_List.19_Reverse_Linked_List_II",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter09_Stack_Queue.20_Valid_Parentheses",
        "description": "Chapter09_Stack_Queue.20_Valid_Parentheses",
        "peekOfCode": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        table = { ')' : '(', '}' : '{', ']' : '[', }\n        for ch in s:\n            if ch not in table:\n                stack.append(ch)\n            elif not stack or table[ch] != stack.pop():\n                return False\n        return len(stack) == 0",
        "detail": "Chapter09_Stack_Queue.20_Valid_Parentheses",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter09_Stack_Queue.21_Remove_Duplicate_Letters",
        "description": "Chapter09_Stack_Queue.21_Remove_Duplicate_Letters",
        "peekOfCode": "class Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        counter, seen, stack = collections.Counter(s), set(), []\n        for char in s:\n            counter[char] -= 1\n            if char in seen:\n                continue\n            while stack and char < stack[-1] and counter[stack[-1]] > 0:\n                seen.remove(stack.pop())\n            stack.append(char)",
        "detail": "Chapter09_Stack_Queue.21_Remove_Duplicate_Letters",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter09_Stack_Queue.22_Daily_Temperatures",
        "description": "Chapter09_Stack_Queue.22_Daily_Temperatures",
        "peekOfCode": "class Solution:\n    def dailyTemperatures(self, temperatures: list[int]) -> list[int]:\n        answer = [0] * len(temperatures)\n        stack = []\n        for i, cur in enumerate(temperatures):\n            while stack and cur > temperatures[stack[-1]]:\n                last = stack.pop()\n                answer[last] = i - last\n            stack.append(i)\n        return answer",
        "detail": "Chapter09_Stack_Queue.22_Daily_Temperatures",
        "documentation": {}
    },
    {
        "label": "MyStack",
        "kind": 6,
        "importPath": "Chapter09_Stack_Queue.23_Implement_Stack_using_Queues",
        "description": "Chapter09_Stack_Queue.23_Implement_Stack_using_Queues",
        "peekOfCode": "class MyStack:\n    def __init__(self):\n        self.q = collections.deque()\n    def push(self, x: int) -> None:\n        self.q.append(x)\n    def pop(self) -> int:\n        return self.q.pop()\n    def top(self) -> int:\n        return self.q[len(self.q) - 1]\n    def empty(self) -> bool:",
        "detail": "Chapter09_Stack_Queue.23_Implement_Stack_using_Queues",
        "documentation": {}
    },
    {
        "label": "MyQueue",
        "kind": 6,
        "importPath": "Chapter09_Stack_Queue.24_Implement_Queue_using_Stacks",
        "description": "Chapter09_Stack_Queue.24_Implement_Queue_using_Stacks",
        "peekOfCode": "class MyQueue:\n    def __init__(self):\n        self.st = []\n        self.index = 0\n    def push(self, x: int) -> None:\n        self.st.append(x)\n    def pop(self) -> int:\n        self.index += 1\n        return (self.st[self.index - 1])\n    def peek(self) -> int:",
        "detail": "Chapter09_Stack_Queue.24_Implement_Queue_using_Stacks",
        "documentation": {}
    },
    {
        "label": "MyCircularQueue",
        "kind": 6,
        "importPath": "Chapter09_Stack_Queue.25_Design_Circular_Queue",
        "description": "Chapter09_Stack_Queue.25_Design_Circular_Queue",
        "peekOfCode": "class MyCircularQueue:\n    def __init__(self, k: int):\n        self.stack = [None] * k\n        self.max = k\n        self.size = 0\n        self.front = 0\n        self.rear = -1\n    def enQueue(self, value: int) -> bool:\n        if self.size == self.max:\n            return False",
        "detail": "Chapter09_Stack_Queue.25_Design_Circular_Queue",
        "documentation": {}
    },
    {
        "label": "MyCircularDeque",
        "kind": 6,
        "importPath": "Chapter10_Deque_Queue.26_design_circular_deque",
        "description": "Chapter10_Deque_Queue.26_design_circular_deque",
        "peekOfCode": "class MyCircularDeque:\n    def __init__(self, k):\n        self.head, self.tail = ListNode(None), ListNode(None)\n        self.k, self.len = k, 0\n        self.head.right, self.tail.left = self.tail, self.head\n    def _add(self, node: ListNode, new: ListNode):\n        n = node.right\n        node.right = new\n        new.left, new.right = node, n\n        n.left = new",
        "detail": "Chapter10_Deque_Queue.26_design_circular_deque",
        "documentation": {}
    },
    {
        "label": "merge_k_lists",
        "kind": 2,
        "importPath": "Chapter10_Deque_Queue.27_merge_k_sorted_list",
        "description": "Chapter10_Deque_Queue.27_merge_k_sorted_list",
        "peekOfCode": "def merge_k_lists(self, lists):\n    root = result = ListNode(None)\n    heap = []\n    for i in range(len(lists)):\n        if lists[i]:\n            heapq.heappush(heap, (list[i].val, i, lists[i]))\n    while heap:\n        node = heapq.heapppop(heap)\n        idx = node[1]\n        result.next = node[2]",
        "detail": "Chapter10_Deque_Queue.27_merge_k_sorted_list",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter10_Deque_Queue.LinkedList",
        "description": "Chapter10_Deque_Queue.LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, val = 0, next=None):\n        self.val = val\n        self.next = next",
        "detail": "Chapter10_Deque_Queue.LinkedList",
        "documentation": {}
    },
    {
        "label": "my_hashmap",
        "kind": 6,
        "importPath": "Chapter11_Hash_Table.28_design_hashmap_chaining",
        "description": "Chapter11_Hash_Table.28_design_hashmap_chaining",
        "peekOfCode": "class my_hashmap:\n    def __init__(self):\n        self.size = 1000\n        self.table = collections.defaultdict(ListNode)\n        # collections.defaultdict: 존재하지 않는 키 조회시 자동으로 디폴트 생성\n    def put(self, key:int, value:int):\n        index = key % self.size\n        # 인덱스에 노드가 없으면 삽입 후 종료\n        if self.table[index].value is None:\n            self.table[index] = ListNode(key, value)",
        "detail": "Chapter11_Hash_Table.28_design_hashmap_chaining",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter11_Hash_Table.29_Jewels_and_Stones",
        "description": "Chapter11_Hash_Table.29_Jewels_and_Stones",
        "peekOfCode": "class Solution:\n    def numJewelsInStones(self, jewels: str, stones: str) -> int:\n        dic = {}\n        result = 0\n        for stone in stones:\n            if stone in dic:\n                dic[stone] += 1\n            else:\n                dic[stone] = 1\n        for jewel in jewels:",
        "detail": "Chapter11_Hash_Table.29_Jewels_and_Stones",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter11_Hash_Table.30_Longest_Substring_Without_Repeating_Characters",
        "description": "Chapter11_Hash_Table.30_Longest_Substring_Without_Repeating_Characters",
        "peekOfCode": "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        dic = {}\n        start = 0\n        max_num = 0\n        for i, ch in enumerate(s):\n            if ch in dic and start <= dic[ch]:\n                start = dic[ch] + 1\n            else:\n                max_num = max(max_num, i - start + 1)",
        "detail": "Chapter11_Hash_Table.30_Longest_Substring_Without_Repeating_Characters",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter11_Hash_Table.31_Top_K_Frequent_Elements",
        "description": "Chapter11_Hash_Table.31_Top_K_Frequent_Elements",
        "peekOfCode": "class Solution:\n    def topKFrequent(self, nums: list[int], k: int) -> list[int]:\n        dic = {}\n        for num in nums:\n            if num in dic:\n                dic[num] += 1\n            else:\n                dic[num] = 1\n        sorted_dict = sorted(dic.items(), key = lambda item: item[1], reverse = True)\n        result = []",
        "detail": "Chapter11_Hash_Table.31_Top_K_Frequent_Elements",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "Chapter11_Hash_Table.LinkedList",
        "description": "Chapter11_Hash_Table.LinkedList",
        "peekOfCode": "class ListNode:\n    def __init__(self, key=None, value=None):\n        self.key = key\n        self.value = value\n        self.next = None",
        "detail": "Chapter11_Hash_Table.LinkedList",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter12_Graph.32_Number_of_Islands",
        "description": "Chapter12_Graph.32_Number_of_Islands",
        "peekOfCode": "class Solution:\n    def numIslands(self, grid: list[list[str]]) -> int:\n        def dfs(i, j) :\n            if i < 0 or i >= len(grid) or j < 0 or j >= len(grid[0]) or grid[i][j] != '1':\n                return\n            grid[i][j] = 0\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)",
        "detail": "Chapter12_Graph.32_Number_of_Islands",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "Chapter12_Graph.33_Letter_Combinations_of_a_Phone_Number",
        "description": "Chapter12_Graph.33_Letter_Combinations_of_a_Phone_Number",
        "peekOfCode": "class Solution:\n    def letterCombinations(self, digits: str) -> list[str]:\n        def dfs(index, tmp):\n            if len(tmp) == len(digits):\n                result.append(tmp)\n                return\n            for i in range(index, len(digits)):\n                for ch in dic[digits[i]]:\n                    dfs(i + 1, tmp + ch)\n        if digits == \"\":",
        "detail": "Chapter12_Graph.33_Letter_Combinations_of_a_Phone_Number",
        "documentation": {}
    },
    {
        "label": "perm",
        "kind": 2,
        "importPath": "Chapter12_Graph.34_perm_dfs",
        "description": "Chapter12_Graph.34_perm_dfs",
        "peekOfCode": "def perm(self, nums):\n    result = []\n    prev = []\n    def dfs(elements):\n        if len(elements) == 0:\n            result.append(prev[:])\n        for e in elements:\n            next = elements[:]\n            next.remove(e)\n            prev.append(e)",
        "detail": "Chapter12_Graph.34_perm_dfs",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "Chapter12_Graph.34_perm_dfs",
        "description": "Chapter12_Graph.34_perm_dfs",
        "peekOfCode": "def factorial(n):\n    if n == 1:\n        return 1;\n    return n * factorial(n - 1);\ndef perm_manual(nums):\n    tmp = []\n    result  = []\n    dfs(result, tmp, 0)\n    print(result)\ndef dfs(result, tmp, count):",
        "detail": "Chapter12_Graph.34_perm_dfs",
        "documentation": {}
    },
    {
        "label": "perm_manual",
        "kind": 2,
        "importPath": "Chapter12_Graph.34_perm_dfs",
        "description": "Chapter12_Graph.34_perm_dfs",
        "peekOfCode": "def perm_manual(nums):\n    tmp = []\n    result  = []\n    dfs(result, tmp, 0)\n    print(result)\ndef dfs(result, tmp, count):\n    if count == factorial(len(nums)):\n        return\n    if len(nums) == len(tmp):\n        result.append(tmp)",
        "detail": "Chapter12_Graph.34_perm_dfs",
        "documentation": {}
    },
    {
        "label": "dfs",
        "kind": 2,
        "importPath": "Chapter12_Graph.34_perm_dfs",
        "description": "Chapter12_Graph.34_perm_dfs",
        "peekOfCode": "def dfs(result, tmp, count):\n    if count == factorial(len(nums)):\n        return\n    if len(nums) == len(tmp):\n        result.append(tmp)\n        tmp = []\n        count += 1\n    for i in nums:\n        if i in tmp:\n            continue;",
        "detail": "Chapter12_Graph.34_perm_dfs",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "Chapter12_Graph.34_perm_dfs",
        "description": "Chapter12_Graph.34_perm_dfs",
        "peekOfCode": "nums = [1, 2, 3]\nperm_manual(nums)",
        "detail": "Chapter12_Graph.34_perm_dfs",
        "documentation": {}
    },
    {
        "label": "perm",
        "kind": 2,
        "importPath": "Chapter12_Graph.34_perm_itertools",
        "description": "Chapter12_Graph.34_perm_itertools",
        "peekOfCode": "def perm(self, nums):\n    return list(itertools.perutations(nums))",
        "detail": "Chapter12_Graph.34_perm_itertools",
        "documentation": {}
    },
    {
        "label": "comb",
        "kind": 2,
        "importPath": "Chapter12_Graph.35_comb_dfs",
        "description": "Chapter12_Graph.35_comb_dfs",
        "peekOfCode": "def comb(self, n, k):\n    result = []\n    def dfs(el, start, k):\n        if k == 0:\n            result.append(el[:])\n            return\n        for i in range(start, n + 1):\n            el.append(i)\n            dfs(el, i + 1, k - 1)\n            el.pop()",
        "detail": "Chapter12_Graph.35_comb_dfs",
        "documentation": {}
    },
    {
        "label": "combine",
        "kind": 2,
        "importPath": "Chapter12_Graph.35_comb_itertools",
        "description": "Chapter12_Graph.35_comb_itertools",
        "peekOfCode": "def combine(self, n, k):\n    return list(itertools.combinations(range(1, n + 1), k))",
        "detail": "Chapter12_Graph.35_comb_itertools",
        "documentation": {}
    },
    {
        "label": "sum_comb",
        "kind": 2,
        "importPath": "Chapter12_Graph.36_sum_comb_dfs",
        "description": "Chapter12_Graph.36_sum_comb_dfs",
        "peekOfCode": "def sum_comb(self, cand, target):\n    result = []\n    def dfs(csum, index, path):\n        if csum < 0:\n            return\n        if csum == 0:\n            result.append(path)\n            return\n        for i in range(index, len(cand)):\n            dfs(csum - cand[i], i, path + [cand[i]])",
        "detail": "Chapter12_Graph.36_sum_comb_dfs",
        "documentation": {}
    },
    {
        "label": "subsets",
        "kind": 2,
        "importPath": "Chapter12_Graph.37_subset",
        "description": "Chapter12_Graph.37_subset",
        "peekOfCode": "def subsets(self, nums):\n    result = []\n    def dfs(index, path):\n        result.append(path)\n        for i in range(index, len(nums)):\n            dfs(i + 1, path + [nums[i]])\n    dfs(0, [])\n    return result",
        "detail": "Chapter12_Graph.37_subset",
        "documentation": {}
    }
]